/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Classes.Course;
import Classes.Student;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Doriela
 */


public class FriendsListWindow extends javax.swing.JFrame {

    /**
     * Creates new form FriendsListWindow
     */
    private Student user=Student.getCurrentUser();
    private ArrayList<Integer> friendIDsList= new ArrayList<>();
    public FriendsListWindow() {
        initComponents();
        populateFriendsTable();
        populateFriendCoursesTable(-1);
        lblError.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblFriends = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        txtFriendID = new javax.swing.JTextField();
        btnShowCourses = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblFriendCourses = new javax.swing.JTable();
        lblError = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtCourseID = new javax.swing.JTextField();
        btnAddCourse = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setTitle("Friends' List");

        jDesktopPane1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Friends Table:");

        tblFriends.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Surname", "Major", "Minor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFriends.setRowHeight(32);
        tblFriends.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFriendsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblFriends);
        if (tblFriends.getColumnModel().getColumnCount() > 0) {
            tblFriends.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Friend ID:");

        btnShowCourses.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnShowCourses.setText("Show Courses");
        btnShowCourses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowCoursesActionPerformed(evt);
            }
        });

        tblFriendCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course ID", "Title", "Instructor", "Day", "Time", "Location", "Credits"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFriendCourses.setRowHeight(26);
        tblFriendCourses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFriendCoursesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblFriendCourses);
        if (tblFriendCourses.getColumnModel().getColumnCount() > 0) {
            tblFriendCourses.getColumnModel().getColumn(0).setMaxWidth(80);
            tblFriendCourses.getColumnModel().getColumn(3).setMaxWidth(80);
            tblFriendCourses.getColumnModel().getColumn(5).setMaxWidth(80);
            tblFriendCourses.getColumnModel().getColumn(6).setMaxWidth(50);
        }

        lblError.setForeground(new java.awt.Color(255, 255, 255));
        lblError.setText("Error!");

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Enter Course ID:");

        txtCourseID.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        btnAddCourse.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAddCourse.setText("Add Course");
        btnAddCourse.setToolTipText("Go to Course");
        btnAddCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCourseActionPerformed(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Friends Courses:");

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("(if you want to see the courses of a friend click on the table)");

        jDesktopPane1.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(txtFriendID, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(btnShowCourses, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(lblError, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(txtCourseID, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(btnAddCourse, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 891, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblError, javax.swing.GroupLayout.PREFERRED_SIZE, 713, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                .addComponent(txtFriendID, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnShowCourses)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCourseID, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnAddCourse))))
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(307, Short.MAX_VALUE))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFriendID, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnShowCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCourseID, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        jScrollPane1.setViewportView(jDesktopPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 963, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnShowCoursesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowCoursesActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelofThistable=(DefaultTableModel) tblFriendCourses.getModel();
        modelofThistable.setRowCount(0);//clearing previous data
        lblError.setVisible(false);
        try{
            String s=txtFriendID.getText();//user input in the textfield
            int friendId=Integer.parseInt(s);//user input converted to integer
            if(user.isFriendWith(friendId)){
                populateFriendCoursesTable(friendId);//reads data from the DataReader and places them on the fields
            }
            else{
                lblError.setForeground(Color.white);
                lblError.setVisible(true);
                lblError.setText("This student does not exist or is not in your Friends' List!");
            }
        }
        catch(NumberFormatException e){
            lblError.setText("Invalid Friend ID!");
            lblError.setForeground(Color.white);
            lblError.setVisible(true);//input not numeric
        }
        
    }//GEN-LAST:event_btnShowCoursesActionPerformed

    private void btnAddCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCourseActionPerformed
        // TODO add your handling code here:
        String courseIDStr=txtCourseID.getText();
        try{
            int courseId=Integer.parseInt(courseIDStr);
            Course course= Course.getCourse(courseId);//here we find the course
            if(course!=null){
                //boolean isFound=false;
                ArrayList<Course> coursesOfStudent=user.getCourseList(user.getID());
                ArrayList<Course> possibleCoursesOfStudent=user.getPossibleCoursesList();//list of all possible courses
                
                System.out.println("hasCourse: "+ user.hasCourse(courseId));
                //System.exit(0);
                //System.out.println("isFound: "+ isFound);*/
                if(Course.contains(possibleCoursesOfStudent, course) && !Course.contains(coursesOfStudent, course)){
                    System.out.println("AddCourse: "+user.addCourse(course));
                    lblError.setText("Course added successfully! Refresh table in main window!");
                    
                }
                else{
                    lblError.setText("You have this course already or you are not eligible to take it!");

                }

            }
            else{
                //course does not exist
                lblError.setText("This course does not exist! Enter again!");

            }

        }
        catch(NumberFormatException e){
            //course id must be number
            lblError.setText("Wrong course ID! Must be numeric!");

        }

        lblError.setForeground(Color.WHITE);
        lblError.setVisible(true);

    }//GEN-LAST:event_btnAddCourseActionPerformed

    private void tblFriendsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFriendsMouseClicked
        // TODO add your handling code here:
        int index=tblFriends.getSelectedRow();
        TableModel model=tblFriends.getModel();
        int friendID=Integer.parseInt(model.getValueAt(index, 0).toString());//get the ID of the selected row
        txtFriendID.setText(new Integer(friendID).toString());
        populateFriendCoursesTable(friendID);
    }//GEN-LAST:event_tblFriendsMouseClicked

    private void tblFriendCoursesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFriendCoursesMouseClicked
        // TODO add your handling code here:
        int index=tblFriendCourses.getSelectedRow();
        TableModel model=tblFriendCourses.getModel();
        int courseID=Integer.parseInt(model.getValueAt(index, 0).toString());//get the ID of the selected row
        txtCourseID.setText(new Integer (courseID).toString());
    }//GEN-LAST:event_tblFriendCoursesMouseClicked

    /**
     * 
     */
    public static void main() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FriendsListWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FriendsListWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FriendsListWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FriendsListWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FriendsListWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCourse;
    private javax.swing.JButton btnShowCourses;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblError;
    private javax.swing.JTable tblFriendCourses;
    private javax.swing.JTable tblFriends;
    private javax.swing.JTextField txtCourseID;
    private javax.swing.JTextField txtFriendID;
    // End of variables declaration//GEN-END:variables



        
    private void populateFriendsTable(){
        DefaultTableModel modelofThistable=(DefaultTableModel) tblFriends.getModel();
        modelofThistable.setRowCount(0);//clearing previous data
        Object[] rowInfo= new Object[5];
        ArrayList<Student> friends= user.getFriendsList();
        //adding all the friends of the current user to the table
        for(Student thisStudent: friends){
            rowInfo[0]=thisStudent.getID();
            rowInfo[1]=thisStudent.getName();
            rowInfo[2]=thisStudent.getSurname();
            rowInfo[3]=thisStudent.getMajor();
            rowInfo[4]=thisStudent.getMinor();
            modelofThistable.addRow(rowInfo);
            friendIDsList.add(thisStudent.getID());//add the id to the array list containing the friends IDs
        }   
        
        tblFriends.setFillsViewportHeight(true);
        
    }
    
    /**Method to populate the table of friends courses
     *@param friendID - is the ID of the friend whose courses we want to see
     * if it is -1 than we want the whole list of friends courses, else it will show
     * the courses of a friend
     */
    private void populateFriendCoursesTable(int friendID){
        DefaultTableModel modelofThistable=(DefaultTableModel) tblFriendCourses.getModel();
        modelofThistable.setRowCount(0);//clearing previous data
        Object[] rowInfo= new Object[7];
        ArrayList<Course>courses= new ArrayList<Course>();
        if(friendID==-1){
                courses=getCourses();//will return all the courses taken by all friends
        }
        else{
            courses=user.getCourseList(friendID);//specific course list of each friend
        }
        //adding all the course of the current user to the table
        for(Course thisCourse: courses){
            
            rowInfo[0]=thisCourse.getID();
            rowInfo[1]=thisCourse.getTitle();
            rowInfo[2]=thisCourse.getInstructor();
            rowInfo[3]=thisCourse.getDay();
            rowInfo[4]=thisCourse.getTime();
            rowInfo[5]=thisCourse.getLocation();
            rowInfo[6]=thisCourse.getCredits();
            
            modelofThistable.addRow(rowInfo);
        
        }   
        
        tblFriends.setFillsViewportHeight(true);
    
    
    }
    
    /**Method to remove all duplicates from the courses list of all friends
     *@return the list of courses without duplicates
     */ 
    private ArrayList getCourses(){
        ArrayList<Student> friends= user.getFriendsList();
        ArrayList<Course> courses=new ArrayList<>();
        for (Student friend : friends) {
            ArrayList<Course> friendCoursesList=friend.getCourseList(friend.getID());
            for (Course course : friendCoursesList) {
                if(!Course.contains(courses,course))
                    courses.add(course);
            }
        }
        return courses;
    }

}
